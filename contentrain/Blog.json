[{"createdAt":1640879314588,"cover":"1640879327289_cover.jpg","content":"<p><strong>Merhaba,</strong></p><p>Bu yazıyı temel insan ihtiyaçlarından olduğunu düşündüğüm bilgiyi aktarma ihtiyacımdan dolayı ve aynı zamanda belki birilerine faydası dokunur diye yazıyorum. Bugün <strong>KOÜ Elektrik Mühendisliği</strong> bölümüne yeni başlamış olan birinci sınıf arkadaşların WhatsApp gruplarına girdiğimde mevcut dönem derslerinden olan <strong>“Bilgisayar Programlamaya Giriş”</strong> hakkında fikir alışverişi yaptıklarını gördüm ve ben de bilgim dahilinde birkaç şey paylaşmak istedim.</p>","title":"Yazılıma başlamayı düşünenler ve henüz başlamışlar için tavsiyeler","ID":"bf38a3b1-40cb-4b62-9c18-901a32ff0ac6","tags":[],"excerpt":"Merhaba, Bu yazıyı temel insan ihtiyaçlarından olduğunu düşündüğüm bilgiyi aktarma ihtiyacımdan dolayı ve aynı zamanda belki birilerine faydası dokunur diye yazıyorum.","updatedAt":1640879329669},{"createdAt":1640879937098,"cover":"1640879887426_React-Redux.jpg","content":"<h1>Getting started</h1><h2>Install<a href=\"https://redux-saga.js.org/docs/introduction/GettingStarted#install\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h2><pre class=\"ql-syntax\" spellcheck=\"false\">$ npm install redux-saga\n</pre><p><br></p><p>or</p><pre class=\"ql-syntax\" spellcheck=\"false\">$ yarn add redux-saga\n</pre><p><br></p><p>Alternatively, you may use the provided UMD builds directly in the <code>&lt;script&gt;</code> tag of an HTML page. See <a href=\"https://redux-saga.js.org/docs/introduction/GettingStarted#using-umd-build-in-the-browser\" rel=\"noopener noreferrer\" target=\"_blank\">this section</a>.</p><h2>Usage Example<a href=\"https://redux-saga.js.org/docs/introduction/GettingStarted#usage-example\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h2><p>Suppose we have a UI to fetch some user data from a remote server when a button is clicked. (For brevity, we'll just show the action triggering code.)</p><pre class=\"ql-syntax\" spellcheck=\"false\">class UserComponent extends React.Component {\n  ...\n  onSomeButtonClicked() {\n    const { userId, dispatch } = this.props\n    dispatch({type: 'USER_FETCH_REQUESTED', payload: {userId}})\n  }\n  ...\n}\n</pre><p>The Component dispatches a plain Object action to the Store. We'll create a Saga that watches for all <code>USER_FETCH_REQUESTED</code> actions and triggers an API call to fetch the user data.</p><h4><code>sagas.js</code><a href=\"https://redux-saga.js.org/docs/introduction/GettingStarted#sagasjs\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h4><pre class=\"ql-syntax\" spellcheck=\"false\">import { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\nimport Api from '...'\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* fetchUser(action) {\n   try {\n      const user = yield call(Api.fetchUser, action.payload.userId);\n      yield put({type: \"USER_FETCH_SUCCEEDED\", user: user});\n   } catch (e) {\n      yield put({type: \"USER_FETCH_FAILED\", message: e.message});\n   }\n}\n\n/*\n  Starts fetchUser on each dispatched `USER_FETCH_REQUESTED` action.\n  Allows concurrent fetches of user.\n*/\nfunction* mySaga() {\n  yield takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\n}\n\n/*\n  Alternatively you may use takeLatest.\n\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\n  dispatched while a fetch is already pending, that pending fetch is cancelled\n  and only the latest one will be run.\n*/\nfunction* mySaga() {\n  yield takeLatest(\"USER_FETCH_REQUESTED\", fetchUser);\n}\n\nexport default mySaga;\n</pre><p>To run our Saga, we'll have to connect it to the Redux Store using the <code>redux-saga</code> middleware.</p><h4><code>main.js</code><a href=\"https://redux-saga.js.org/docs/introduction/GettingStarted#mainjs\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h4><pre class=\"ql-syntax\" spellcheck=\"false\">import { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\nimport reducer from './reducers'\nimport mySaga from './sagas'\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n// mount it on the Store\nconst store = createStore(\n  reducer,\n  applyMiddleware(sagaMiddleware)\n)\n\n// then run the saga\nsagaMiddleware.run(mySaga)\n\n// render the application\n</pre><h2>Using UMD build in the browser<a href=\"https://redux-saga.js.org/docs/introduction/GettingStarted#using-umd-build-in-the-browser\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h2><p>There is also a <strong>UMD</strong> build of <code>redux-saga</code> available in the <code>dist/</code> folder. When using the umd build <code>redux-saga</code> is available as <code>ReduxSaga</code> in the window object. This enables you to create Saga middleware without using ES6 <code>import</code> syntax like this:</p><pre class=\"ql-syntax\" spellcheck=\"false\">var sagaMiddleware = ReduxSaga.default()\n</pre><p><br></p><p>The UMD version is useful if you don't use Webpack or Browserify. You can access it directly from <a href=\"https://unpkg.com/\" rel=\"noopener noreferrer\" target=\"_blank\">unpkg</a>.</p><p>The following builds are available:</p><ul><li><a href=\"https://unpkg.com/redux-saga/dist/redux-saga.umd.js\" rel=\"noopener noreferrer\" target=\"_blank\">https://unpkg.com/redux-saga/dist/redux-saga.umd.js</a></li><li><a href=\"https://unpkg.com/redux-saga/dist/redux-saga.umd.min.js\" rel=\"noopener noreferrer\" target=\"_blank\">https://unpkg.com/redux-saga/dist/redux-saga.umd.min.js</a></li></ul><p><strong>Important!</strong></p><p> If the browser you are targeting doesn't support <em>ES2015 generators</em>, you must transpile them (i.e., with <a href=\"https://github.com/facebook/regenerator/tree/master/packages/regenerator-transform\" rel=\"noopener noreferrer\" target=\"_blank\">babel plugin</a>) and provide a valid runtime, such as <a href=\"https://unpkg.com/regenerator-runtime/runtime.js\" rel=\"noopener noreferrer\" target=\"_blank\">the one here</a>. The runtime must be imported before <strong>redux-saga</strong>:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import 'regenerator-runtime/runtime'\n// then\nimport sagaMiddleware from 'redux-saga'\n</pre><p><br></p>","title":"What is Redux Saga?","ID":"3f64d0f4-d22a-4a4f-b6eb-799c398f2215","tags":[],"excerpt":"redux-saga is a library that aims to make application side effects (i.e. asynchronous things like data fetching and impure things like accessing the browser cache) easier to manage, more efficient to execute, easy to test, and better at handling failures."},{"createdAt":1640880008895,"cover":"","content":"<h5><br></h5><h5>What You'll Learn</h5><ul><li>What RTK Query is and what problems it solves</li><li>What APIs are included in RTK Query</li><li>Basic RTK Query usage</li></ul><p><strong>RTK Query</strong> is a powerful data fetching and caching tool. It is designed to simplify common cases for loading data in a web application, <strong>eliminating the need to hand-write data fetching &amp; caching logic yourself</strong>.</p><p>RTK Query is <strong>an optional addon included in the Redux Toolkit package</strong>, and its functionality is built on top of the other APIs in Redux Toolkit.</p><h2>Motivation<a href=\"https://redux-toolkit.js.org/rtk-query/overview#motivation\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h2><p>Web applications normally need to fetch data from a server in order to display it. They also usually need to make updates to that data, send those updates to the server, and keep the cached data on the client in sync with the data on the server. This is made more complicated by the need to implement other behaviors used in today's applications:</p><ul><li>Tracking loading state in order to show UI spinners</li><li>Avoiding duplicate requests for the same data</li><li>Optimistic updates to make the UI feel faster</li><li>Managing cache lifetimes as the user interacts with the UI</li></ul><p>The Redux core has always been very minimal - it's up to developers to write all the actual logic. That means that Redux has never included anything built in to help solve these use cases. The Redux docs have taught <a href=\"https://redux.js.org/tutorials/fundamentals/part-7-standard-patterns#async-request-status\" rel=\"noopener noreferrer\" target=\"_blank\">some common patterns for dispatching actions around the request lifecycle to track loading state and request results</a>, and <a href=\"https://redux-toolkit.js.org/api/createAsyncThunk\" rel=\"noopener noreferrer\" target=\"_blank\">Redux Toolkit's </a><code><a href=\"https://redux-toolkit.js.org/api/createAsyncThunk\" rel=\"noopener noreferrer\" target=\"_blank\">createAsyncThunk</a></code><a href=\"https://redux-toolkit.js.org/api/createAsyncThunk\" rel=\"noopener noreferrer\" target=\"_blank\"> API</a> was designed to abstract that typical pattern. However, users still have to write significant amounts of reducer logic to manage the loading state and the cached data.</p><p>Over the last couple years, the React community has come to realize that <strong>\"data fetching and caching\" is really a different set of concerns than \"state management\"</strong>. While you can use a state management library like Redux to cache data, the use cases are different enough that it's worth using tools that are purpose-built for the data fetching use case.</p><p>RTK Query takes inspiration from other tools that have pioneered solutions for data fetching, like Apollo Client, React Query, Urql, and SWR, but adds a unique approach to its API design:</p><ul><li>The data fetching and caching logic is built on top of Redux Toolkit's <code>createSlice</code> and <code>createAsyncThunk</code> APIs</li><li>Because Redux Toolkit is UI-agnostic, RTK Query's functionality can be used with any UI layer</li><li>API endpoints are defined ahead of time, including how to generate query parameters from arguments and transform responses for caching</li><li>RTK Query can also generate React hooks that encapsulate the entire data fetching process, provide <code>data</code> and <code>isLoading</code> fields to components, and manage the lifetime of cached data as components mount and unmount</li><li>RTK Query provides \"cache entry lifecycle\" options that enable use cases like streaming cache updates via websocket messages after fetching the initial data</li><li>We have early working examples of code generation of API slices from OpenAPI and GraphQL schemas</li><li>Finally, RTK Query is completely written in TypeScript, and is designed to provide an excellent TS usage experience</li></ul><h2>What's included<a href=\"https://redux-toolkit.js.org/rtk-query/overview#whats-included\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h2><h3>APIs<a href=\"https://redux-toolkit.js.org/rtk-query/overview#apis\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h3><p>RTK Query is included within the installation of the core Redux Toolkit package. It is available via either of the two entry points below:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import { createApi } from '@reduxjs/toolkit/query'\n\n/* React-specific entry point that automatically generates\n   hooks corresponding to the defined endpoints */\nimport { createApi } from '@reduxjs/toolkit/query/react'\n</pre><p>RTK Query includes these APIs:</p><ul><li><code><a href=\"https://redux-toolkit.js.org/rtk-query/api/createApi\" rel=\"noopener noreferrer\" target=\"_blank\">createApi()</a></code>: The core of RTK Query's functionality. It allows you to define a set of endpoints describe how to retrieve data from a series of endpoints, including configuration of how to fetch and transform that data. In most cases, you should use this once per app, with \"one API slice per base URL\" as a rule of thumb.</li><li><code><a href=\"https://redux-toolkit.js.org/rtk-query/api/fetchBaseQuery\" rel=\"noopener noreferrer\" target=\"_blank\">fetchBaseQuery()</a></code>: A small wrapper around <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\" rel=\"noopener noreferrer\" target=\"_blank\">fetch</a></code> that aims to simplify requests. Intended as the recommended <code>baseQuery</code> to be used in <code>createApi</code> for the majority of users.</li><li><code><a href=\"https://redux-toolkit.js.org/rtk-query/api/ApiProvider\" rel=\"noopener noreferrer\" target=\"_blank\">&lt;ApiProvider /&gt;</a></code>: Can be used as a <code>Provider</code> if you <strong>do not already have a Redux store</strong>.</li><li><code><a href=\"https://redux-toolkit.js.org/rtk-query/api/setupListeners\" rel=\"noopener noreferrer\" target=\"_blank\">setupListeners()</a></code>: A utility used to enable <code>refetchOnMount</code> and <code>refetchOnReconnect</code> behaviors.</li></ul><h3>Bundle Size<a href=\"https://redux-toolkit.js.org/rtk-query/overview#bundle-size\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h3><p>RTK Query adds a fixed one-time amount to your app's bundle size. Since RTK Query builds on top of Redux Toolkit and React-Redux, the added size varies depending on whether you are already using those in your app. The estimated min+gzip bundle sizes are:</p><ul><li>If you are using RTK already: ~9kb for RTK Query and ~2kb for the hooks.</li><li>If you are not using RTK already:</li><li class=\"ql-indent-1\">Without React: 17 kB for RTK+dependencies+RTK Query</li><li class=\"ql-indent-1\">With React: 19kB + React-Redux, which is a peer dependency</li></ul><p>Adding additional endpoint definitions should only increase size based on the actual code inside the <code>endpoints</code> definitions, which will typically be just a few bytes.</p><p>The functionality included in RTK Query quickly pays for the added bundle size, and the elimination of hand-written data fetching logic should be a net improvement in size for most meaningful applications.</p><h2>Basic Usage<a href=\"https://redux-toolkit.js.org/rtk-query/overview#basic-usage\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h2><h3>Create an API Slice<a href=\"https://redux-toolkit.js.org/rtk-query/overview#create-an-api-slice\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h3><p>RTK Query is included within the installation of the core Redux Toolkit package. It is available via either of the two entry points below:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import { createApi } from '@reduxjs/toolkit/query'\n\n/* React-specific entry point that automatically generates\n   hooks corresponding to the defined endpoints */\nimport { createApi } from '@reduxjs/toolkit/query/react'\n</pre><p>For typical usage with React, start by importing <code>createApi</code> and defining an \"API slice\" that lists the server's base URL and which endpoints we want to interact with:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { Pokemon } from './types'\n\n// Define a service using a base URL and expected endpoints\nexport const pokemonApi = createApi({\n  reducerPath: 'pokemonApi',\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://pokeapi.co/api/v2/' }),\n  endpoints: (builder) =&gt; ({\n    getPokemonByName: builder.query&lt;Pokemon, string&gt;({\n      query: (name) =&gt; `pokemon/${name}`,\n    }),\n  }),\n})\n\n// Export hooks for usage in functional components, which are\n// auto-generated based on the defined endpoints\nexport const { useGetPokemonByNameQuery } = pokemonApi\n</pre><h3>Configure the Store<a href=\"https://redux-toolkit.js.org/rtk-query/overview#configure-the-store\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h3><p>The \"API slice\" also contains an auto-generated Redux slice reducer and a custom middleware that manages subscription lifetimes. Both of those need to be added to the Redux store:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import { configureStore } from '@reduxjs/toolkit'\n// Or from '@reduxjs/toolkit/query/react'\nimport { setupListeners } from '@reduxjs/toolkit/query'\nimport { pokemonApi } from './services/pokemon'\n\nexport const store = configureStore({\n  reducer: {\n    // Add the generated reducer as a specific top-level slice\n    [pokemonApi.reducerPath]: pokemonApi.reducer,\n  },\n  // Adding the api middleware enables caching, invalidation, polling,\n  // and other useful features of `rtk-query`.\n  middleware: (getDefaultMiddleware) =&gt;\n    getDefaultMiddleware().concat(pokemonApi.middleware),\n})\n\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors\n// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization\nsetupListeners(store.dispatch)\n</pre><h3>Use Hooks in Components<a href=\"https://redux-toolkit.js.org/rtk-query/overview#use-hooks-in-components\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h3><p>Finally, import the auto-generated React hooks from the API slice into your component file, and call the hooks in your component with any needed parameters. RTK Query will automatically fetch data on mount, re-fetch when parameters change, provide <code>{data, isFetching}</code> values in the result, and re-render the component as those values change:</p>","title":"RTK Query Overview","ID":"664c6374-9413-4c01-aca0-584856dc95d8","tags":[],"excerpt":"RTK Query is a powerful data fetching and caching tool. It is designed to simplify common cases for loading data in a web application, eliminating the need to hand-write data fetching & caching logic yourself."}]