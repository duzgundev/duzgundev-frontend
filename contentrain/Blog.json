[{"createdAt":1640879314588,"cover":"1640879327289_cover.jpg","content":"<p><strong>Merhaba,</strong></p><p><strong>Bu yazıyı temel insan ihtiyaçlarından olduğunu düşündüğüm bilgiyi aktarma ihtiyacımdan dolayı ve aynı zamanda belki birilerine faydası dokunur diye yazıyorum. Bugün KOÜ Elektrik Mühendisliği</strong> bölümüne yeni başlamış olan birinci sınıf arkadaşların WhatsApp gruplarına girdiğimde mevcut dönem derslerinden olan <strong>“Bilgisayar Programlamaya Giriş”</strong> hakkında fikir alışverişi yaptıklarını gördüm ve ben de bilgim dahilinde birkaç şey paylaşmak istedim.</p><p>Peki ben kimim? Ben elektrik mühendisliği okuyan ama edindiği sektör tecrübeleri sonucunda <strong>kendisi için </strong>doğru yolun yazılım geliştiricilik olduğunu düşünen bir öğrenciyim.</p><p>Bu yazıyı okuyan öğrenci arkadaşları da <strong>iki</strong> kategoriye ayrımak istiyorum çünkü ona göre farklı önerilerde bulunacağım.</p><ol><li><strong>Amacı dersi geçmek olan ve asıl mesleğinin yanında biraz da yazılım bilgisi edinmek isteyenler</strong></li><li><strong>Profesyonel kariyerini yazılım geliştirme üzerine inşa etmek isteyenler</strong></li></ol><h1>1. Kategori Önerileri</h1><p>Eğer profesyonel olarak yazılım geliştirmek gibi bir niyetiniz yoksa kendinizi çok yıpratmanıza gerek olmadığını söyleyebilirim çünkü bu dersi geçmek için bir kitaba veya online kursa ihtiyacınız yok.</p><p>Bu dersi iyi harf notlarıyla geçmeniz için yapmanız gerekenler;</p><ol><li>Her derse katılmak</li><li>Dersleri can kulağıyla dinlemek</li><li>Derste anlamadıklarınızı sıcağı sıcağına hocaya sormak, tatmin edici bir cevap alınamadıysa <strong>çekinmeden</strong> tekrar sormak</li><li>Ders bittikten sonra <strong>aynı gün</strong> o dersin tekrarını yapmak</li><li>Derste öğrenilenlerle ufak programlar yazmak</li><li>Bol bol deneme yanılma ile bir şeyleri kavramaya çalışmak</li></ol><p>Bu adımların yanında ben farklı bir kaynak daha istiyorum derseniz (ki ben farklı kaynaklar takip etmenizi de öneririm) İngilizce olarak freeCodeCamp’in <a href=\"https://www.youtube.com/watch?v=KJgsSFOSQv0\" rel=\"noopener noreferrer\" target=\"_blank\">C Programming Tutorial for Beginners</a> videosunu, Türkçe olarak ise Mustafa Murat Coşkun’un <a href=\"https://www.youtube.com/watch?v=naWZ2xVuF30&amp;list=PLIHume2cwmHdFsJRo5oYG7yQ4NyUx43ql\" rel=\"noopener noreferrer\" target=\"_blank\">C Programlama Dersleri</a>’ni önerebilirim.</p><h1>2. Kategori Önerileri</h1><p>Benim de dahil olduğum bu kategorinin önerileri biraz daha derin olacak. İlk olarak bu yazıyı birinci sınıf arkadaşlara hitaben yazdığım için çoğunluk henüz bu ayrıma girmemiş olacaktır, eğer girmiş olan varsa gerçekten tebrik ederim. Bu konuda aslında söylenecek çok söz var fakat onun için de ayrı bir yazı yazmak gerekebilir çünkü bu ayrımı yapabilmenin de çok önemli bir konu olduğunu düşünüyorum.</p><p><br></p><p><br></p><p>Önerilere gelince ilk olarak bahsedeceğim şey sadece bir yazılımcı veya bir mühendis için değil günümüzde <strong>herkes</strong> için çok önemli olduğunu düşündüğüm <strong>İngilizce</strong> konusu. İlk aşamada teknik döküman ve kaynak takip edebilecek seviyede İngilizce bilginizin olması yeterli olacaktır. Fakat uluslararası birtakım faaliyetlerde bulunmak istediğinizde daha fazlasına ihtiyacınız olabilir. Kod yazarken sık sık hatalarla karşılaşıp çözümü için araştırmalar yapıyoruz ve bu konuda <strong>en faydalı</strong> kaynaklar çoğunlukla İngilizce kaynaklar oluyor. Bu mesleğin dili İngilizce arkadaşlar eğer <strong>sağlam temeller</strong> üzerine başarılı bir kariyer inşa etmek istiyorsanız ilk önceliğiniz bahsettiğim düzeyde İngilizce bilgisine erişmek olmalı.</p><p>Şimdi işin rengi biraz daha değişecek çünkü yazılım sektöründe “al kardeşim şunu oku, bunu yap, hopp tamam oldun sen” diyemiyoruz. Fakat her yerde olduğu gibi burada da sabırlı olan, çalışan, pes etmeyen, olumlu bakan kazanıyor. Bu mesleğe adım atmak isteyen fakat henüz araştırmaya başlamış olan insanlar için girmeden önce bilmeleri gereken birkaç şey söyleyeyim ve siz değerli okurlar da güzel güzel çıkarımlarınızı yapabilin.</p><h2>1. Gelişim bu meslekte asla bitmiyor</h2><p>Yazılım sektörü çok hızlı gelişen, değişen ve sürekli yeni teknolojilerin çıktığı bir sektör. Bu sektörün çalışanları da sektörün bu hızına ayak uydurmak durumundalar ve sürekli yeni şeyler öğrenip gelişimin peşinde koşarlar.</p><h2>2. Sabır kilit nokta</h2><p>Yeri gelecek ufacık bir yazım hatasından dolayı saatlerce programınız çalışmayacak ve sebebini anlayamayacaksınız. Yeri gelecek sizin doğru yaptığınız şeyi kullandığınız editörün bir eklentisi yüzünden doğru test edemeyip hatalı sanacaksınız. Bu ve benzeri nice durumlarla karşılaşacaksınız ve karşılaştığınızda o an üzerinde çalıştığınız dilden veya kullandığınız diğer araçlardan nefret etmeden sorunun çözümüne odaklı kalabilmeniz gerekiyor. Çoğu yeni başlayan insan ya dile küfrediyor ya editöre ya işletim sistemine ve hem kendi motivasyonunu düşürüyor hem de işi ilerletmeden oracıkta bırakıp başka şeylere yöneliyor.</p><h2>3. İşini severek yapmak</h2><p>Her işi aslında severek yapmak gerekir fakat yazılımda bunun yarattığı fark inanılmaz derecede büyük, çünkü <strong>neredeyse</strong> bir sınırınız yok. Sınır yok derken yanlış anlaşılmasın bir bilgisayar ve internet bağlantısıyla tabiki Facebook’a rakip olamazsınız fakat rakip olacak bir şirket kurabilir düzeye gelme ihtimaliniz var. Tabi bu sizin hedeflerinize ve başarı kriterlerinize göre de değişkenlik gösterebilir.</p><p>Bu başlık altında aslında demek istediğim sırf iyi bir sektör diye bu işe atılan ve aslında sevmediğini fark edip vasat düzeyde kalan bir yazılımcı olmanızı engellemek. Peki sevip sevmediğinizi nasıl anlayacaksınız? <strong>Deneyerek.</strong> Öğrenciliği sevmemin asıl nedenlerinden birisi de pek bir şey <strong>kaybetmeden</strong> çok fazla şey deneme imkanımızın olması. Bu imkanı kullanın arkadaşlar deneyebildiğiniz kadar çok şey deneyin. Farklı sektörler deneyin, farklı diller, farklı alanlar, farklı insanlar. Farklı olan her şey size bir şeyler katar denemekten asla <strong>çekinmeyin</strong>. Denediniz ve sevmediniz mi? Hiç sorun yok, zaman falan da kaybetmediniz ve artık neyi sevmediğinizi biliyorsunuz. Sevdiğiniz şeyi bulmaya bir adım daha yaklaştınız, harika! Kariyerinizin başında olabildiğince fazla şey denemek iyidir fakat bir yerden sonra da tek bir alana yönelip o alanda uzmanlaşmanız sizi daha değerli kılacaktır bu noktayı da kaçırmayalım.</p><blockquote><strong>If you try, you may fail. If you don’t try, you’re guaranteed to fail.</strong></blockquote><p><br></p><p>Yazılıma başlarken hangi dili öğrenmeliyim, hangi alana yönelmeliyim gibi sorular sıklıkla soruluyor ve bu sorunun da tabiki keskin ve net bir cevabı yok. Fakat bu konuda bolca fikir edinmenizi sağlayacak çok değerli iki tane Türkçe video var. Bunlardan biri daha somut ve maddeler halinde sizi neler yapmanız gerektiği konusunda fikir sahibi yapacağını düşündüğüm <strong>Adem İlter</strong>’in <a href=\"https://youtu.be/U6dQVWHqmSM\" rel=\"noopener noreferrer\" target=\"_blank\">“Yazılıma nasıl başlarım?”</a> videosu. Bir diğeri ise daha felsefik bir yaklaşımla konuyu ele alan <strong>Bilgem Çakır</strong>’ın <a href=\"https://youtu.be/_J_71MI9Zwc\" rel=\"noopener noreferrer\" target=\"_blank\">“Yazılımda Başlamak ve Gelişmek”</a> isimli videosu. Bu videolar tabiki tüm sorularınıza yanıt niteliğinde olamaz fakat ilk aşamada güzel birer rehber niteliğinde olduklarını düşünüyorum ve eminim bunlar gibi daha nice yararlı içerikler vardır. Onları da zamanla ihtiyaç duyduğunuz durumda sizler keşfedeceksiniz zaten.</p><h2><strong>Öğrenmeyi öğrenmek</strong></h2><p>Yazılım geliştiricilikten bağımsız olarak hayatta sürekli yaptığımız bir şey var, <strong>öğrenmek</strong>. Fakat konu yazılım geliştirici olmaya gelince öğrenmenin önemi biraz daha artıyor çünkü meslek hayatında da sürekli öğrenen insanlarız. Bu konuda da tahmin edersiniz ki genele hitap eden bir yöntem yok. Öğrenme işinin verimi kişiden kişiye fazlasıyla değişiklik gösteren bir kavram. Bazı insanlar okuyarak, bazıları izleyerek, bazıları yaparak öğrenir. Sizin göreviniz nasıl öğrendiğinizi öğrenmek olmalı ve mümkünse bu yöntemlerin hepsini <strong>denemelisiniz</strong>. Bu konuda da yardımcı olacağını düşündüğüm işi bilimiyle ve tarihiyle ele alan harika bir ücretsiz <a href=\"https://www.coursera.org/learn/learning-how-to-learn\" rel=\"noopener noreferrer\" target=\"_blank\">Coursera içeriği</a> mevcut fakat <strong>İngilizce</strong>.</p><h2><strong>Takip Önerilerim</strong></h2><p>Konuya özel önerilerin sonuna geldik ve şimdi takip etmeniz gerektiğini düşündüğüm yazılımcıları ve içeriklerini listeliyor olacağım, yanlarına da kısaca hangi konuda içerik ürettiklerini belirteceğim. Kendim web geliştiriciliği ile ilgilendiğim için takip ettiğim kişiler de bu alan üzerine ağırlıklı olacak fakat diğer alanlarla ilgilenen geliştiriceleri de dahil edeceğim. Her kanalın faydasının dokunacağını düşünüyorum özellikle yeni başlayan insanlar için hepsinde öğrenilecek bir sürü şey var;</p><ol><li><a href=\"https://www.youtube.com/channel/UCiziEYDqww4rn3wn7otqHQQ\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Bilgem Çakır</strong></a> işin daha çok felsefik yanlarını anlatması ve ele aldığı konulara derinlemesine ama yormayacak biçimde girmesiyle şiir gibi bir kanala sahip.</li><li><a href=\"https://www.youtube.com/user/ademilter\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Adem İlter</strong></a> daha çok önyüz ve tasarım üzerine içerikler üreten ve bu içerikleri yeni başlayanlara yönelik kurgulayan bir kanal. Youtube kanalının yanı sıra <a href=\"https://feyz.li/\" rel=\"noopener noreferrer\" target=\"_blank\">Feyz</a> adında çok güzel içeriklerinin bulunduğu bir de web sitesi mevcut.</li><li><a href=\"https://www.youtube.com/channel/UCbu25feEIe6fY9fZx8BCMSA\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Doğukan Güven Nomak</strong></a> keşfettiğim için çok mutlu olduğum bir kanal. Piyasadaki onlarca iyi geliştiriciyle <a href=\"https://www.youtube.com/watch?v=x3IljHkP9_E&amp;list=PLAttZmBpvaDzPEvEFfQh21gJlkSqq_V7g\" rel=\"noopener noreferrer\" target=\"_blank\">Yazılımcı Sohbetleri</a> altında sohbetler gerçekleştiriyor ve hepsinin birbirinden değerli olduğunu düşünüyorum, özellikle de yeni başlayanlar için.</li><li><a href=\"https://www.youtube.com/channel/UCdUaAKTLJrPZFStzEJnpQAg\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Veli Bacık</strong></a> kendisiyle yüz yüze de tanışma fırsatı elde ettiğim harika bir mobil geliştirici. Aynı zamanda gözlemlerime göre işine aşık ve çok üretken biri.</li><li><a href=\"http://www.borakasmer.com/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Bora Kaşmer</strong></a> hem Türkçe hem İngilizce makaleleri bulunan aynı zamanda oyun meraklısı ve zamanının Microsoft MVP’si.</li><li><a href=\"https://medium.com/@odayibasi\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Onur Dayıbaşı</strong></a> yazılarından tonla şey öğrendiğim ve bana göre kaliteli Türkçe içerik konusundaki eksikliği kapatan isimlerden kendisi. JavaScript hakkındaki yazıları ufuk açıcı.</li><li><a href=\"https://medium.com/@mhkoca\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Muhammed Hilmi Koca</strong></a> sadece efsane serisi Yazılımcılar İçin Hafta Sonu Okumaları için bile takip etmeye değer gördüğüm bir geliştirici.</li><li><a href=\"http://umutluoglu.com/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Uğur Umutluoğlu</strong></a> deneyim ve .Net kelimelerini yan yana koyunca aklıma gelen ilk isimlerden biri. Çok faydalı içerikleri olan bir <a href=\"https://www.youtube.com/channel/UCpFcAp-klqUMATCKS71ZXPw\" rel=\"noopener noreferrer\" target=\"_blank\">Youtube</a> kanalı da mevcut.</li><li><a href=\"https://www.youtube.com/channel/UCvANtNYHe556zUWm6VzJenQ\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Fatih Acet</strong></a> frontend konusunda çok güzel içeriklere sahip ve nedense bende hep çalışma isteği uyandıran samimi bir geliştirici. Bir süredir yoğunluğundan dolayı teknik içerik paylaşamıyor fakat yine de yeni başlayanlara yönelik sağlam bir kaynak.</li><li><a href=\"https://www.youtube.com/user/SirChintzy\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Selman Kahya</strong></a> kanalında her türden içerik barındıran ve her anlamda fayda sağlamaya çalışan bir geliştirici. Web ağırlıklı işler ortaya koyuyor fakat kesinlikle herkesin bir göz atmasını tavsiye ederim.</li></ol><p>Şimdi biraz da takip ettiğim yabancı kaynaklardan ve kişilerden ilerleyelim. Bu kaynaklar HTML, CSS ve JavaScript odaklı kanallar;</p><ol><li><a href=\"https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>freeCodeCamp</strong></a><strong> </strong>ilk zamanlarında tamamen web odaklı olsa da zamanla içeriklerini çok genişletti ve neredeyse her konuda videoları mevcut. Youtube’un yanı sıra bir de hem web hem python öğrenmek isteyenler için kod yazdırarak öğreten ücretsiz ve sertifikalı <a href=\"https://www.freecodecamp.org/learn/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>kursları</strong></a> mevcut.</li><li><a href=\"https://www.youtube.com/user/TechGuyWeb\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Traversy Media</strong></a> bu alanda en çok aboneye sahip kanallardan biri ve web ile alakalı yok yok bir kanal. Brad Traversy’e ait olan kanalda son zamanlarda farklı isimlerin de videoları yayınlanmaya başladı ve her zamankinden daha renkli bir kanal haline geldi.</li><li><a href=\"https://www.youtube.com/channel/UClb90NQQcskPUGDIXsQEz5Q\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Dev Ed</strong></a> tane tane anlatımıyla gayet öğretici içerikler çeken kanal. Yeni keşfettim fakat çok faydasını gördüm.</li><li><a href=\"https://www.youtube.com/channel/UCeU-1X402kT-JlLdAitxSMA\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Florin Pop</strong></a> yeni bir kanal olmasına rağmen çok başarılı ve çalışkan bir arkadaş kendisi. Bol bol kod yazma videosu ve canlı yayınları görmek isteyenler için bire bir.</li><li><a href=\"https://www.youtube.com/user/KepowOb\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Kevin Powell</strong></a> CSS konusunda sizi bir sonraki seviyeye taşıyacak olan kanal işte tam olarak bu olabilir.</li></ol><p>Son olarak çok güzel bir öğrenme ve keşfetme yöntemi olduğunu düşündüğüm podcast dinleme konusuna değinmek istiyorum. Arabada, otobüste, yürürken, ev işi yaparken, spor yaparken kısacası her yerde dinleyebileceğiniz ve ufkunuzu açacak birkaç podcast’in de linklerini ve kısa açıklamalarını aşağıya yazıyorum. (hepsi Spotify’da mevcut)</p><ol><li><a href=\"https://codefiction.tech/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Codefiction Podcast</strong></a> her alandan geliştiricinin bulunduğu <strong>Codefiction</strong> topluluğunun kurucularının kaydedip yayınladığı bir podcast ve her konuda keyifli sohbetler gerçekleştiriyorlar. Kurucuları arasında iki tane de KOÜ mezunu var :)</li><li><a href=\"https://kodpod.live/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>kodpod</strong></a> Fatih Kadir Akın’ın samimi sohbetler gerçekleştirdiği seri.</li><li><a href=\"https://kodcast.simplecast.com/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>KodCast</strong></a> Selman Kahya ve iki diğer Silikon Vadisi geliştiricisinin kaydettiği podcast.</li><li><a href=\"https://frontendhappyhour.com/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Front End Happy Hour</strong></a> Netflix, Twitch, Atlassian ve LinkedIn gibi şirketlerin önyüz geliştiricilerinin belirli bir konu etrafında konuşması üzerine kurulu ve çook şey öğretiyor. Ama İngilizce.</li><li><a href=\"https://www.uretimbandi.com/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Üretim Bandı</strong></a> son zamanlarda keşfettiğim biraz da endüstriyi anlamaya yönelik faydalı bulduğum ve bu aralar seri üretime geçmiş durumda olan bir podcast serisi. Eran Filiba ve Ender Ahmet Yurt tarafından kaydedilip yayınlanıyor.</li><li><strong>(Ekstra)</strong> <a href=\"https://fularsizentellik.com/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>Fularsız Entellik</strong></a> bu biraz daha yazılımdan uzak ancak genel yaşama dair çok farklı bakış açıları katan bir podcast olduğunu düşündüğüm için eklemek istedim.</li></ol><p><br></p><h2>Bu yazıdan sonra yapmanız gereken ilk şey</h2><p><a href=\"https://github.com/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>GitHub</strong></a> neredeyse bütün yazılımcıların kullandığı ve her yeni yazılımcının kesinlikle kayıt olması ve kullanması gereken bir platform. İlk işiniz GitHub’ın ne olduğunu <strong>araştırmak</strong> ve bir GitHub hesabı açmak olsun.</p><h2>Kapanış</h2><p>Buraya şu an aklıma gelmeyen ve yazamadığım daha bir sürü geliştirici ve kaynaklar var, onları da zamanla eklemeyi düşünüyorum. Kesinlikle burada olması gerektiğini düşündüğünüz isimler veya kaynaklar varsa bi mail uzağınızdayım.</p><p>Her türlü sorunuz ve öneriniz için <a href=\"mailto:duzgunnmert@gmail.com\" rel=\"noopener noreferrer\" target=\"_blank\">duzgunnmert@gmail.com</a> üzerinden mail atabilir ve hatta dilerseniz bana aşağıdaki sosyal medya hesaplarımdan da ulaşabilirsiniz. Okuduğunuz için teşekkür eder, keyifli günler dilerim :)</p><p>Sosyal medya hesaplarım; <a href=\"https://www.linkedin.com/in/mertduzgun/\" rel=\"noopener noreferrer\" target=\"_blank\">LinkedIn</a>, <a href=\"https://twitter.com/duzgundev\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a></p>","title":"Yazılıma başlamayı düşünenler ve henüz başlamışlar için tavsiyeler","ID":"bf38a3b1-40cb-4b62-9c18-901a32ff0ac6","tags":["Software Development","Experience","Sharing"],"excerpt":"Merhaba, Bu yazıyı temel insan ihtiyaçlarından olduğunu düşündüğüm bilgiyi aktarma ihtiyacımdan dolayı ve aynı zamanda belki birilerine faydası dokunur diye yazıyorum.","updatedAt":1640879329669},{"createdAt":1640879937098,"cover":"1640879887426_React-Redux.jpg","content":"<h1>Getting started</h1><h2>Install<a href=\"https://redux-saga.js.org/docs/introduction/GettingStarted#install\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h2><pre class=\"ql-syntax\" spellcheck=\"false\">$ npm install redux-saga\n</pre><p><br></p><p>or</p><pre class=\"ql-syntax\" spellcheck=\"false\">$ yarn add redux-saga\n</pre><p><br></p><p>Alternatively, you may use the provided UMD builds directly in the <code>&lt;script&gt;</code> tag of an HTML page. See <a href=\"https://redux-saga.js.org/docs/introduction/GettingStarted#using-umd-build-in-the-browser\" rel=\"noopener noreferrer\" target=\"_blank\">this section</a>.</p><h2>Usage Example<a href=\"https://redux-saga.js.org/docs/introduction/GettingStarted#usage-example\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h2><p>Suppose we have a UI to fetch some user data from a remote server when a button is clicked. (For brevity, we'll just show the action triggering code.)</p><pre class=\"ql-syntax\" spellcheck=\"false\">class UserComponent extends React.Component {\n  ...\n  onSomeButtonClicked() {\n    const { userId, dispatch } = this.props\n    dispatch({type: 'USER_FETCH_REQUESTED', payload: {userId}})\n  }\n  ...\n}\n</pre><p>The Component dispatches a plain Object action to the Store. We'll create a Saga that watches for all <code>USER_FETCH_REQUESTED</code> actions and triggers an API call to fetch the user data.</p><h4><code>sagas.js</code><a href=\"https://redux-saga.js.org/docs/introduction/GettingStarted#sagasjs\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h4><pre class=\"ql-syntax\" spellcheck=\"false\">import { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\nimport Api from '...'\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* fetchUser(action) {\n   try {\n      const user = yield call(Api.fetchUser, action.payload.userId);\n      yield put({type: \"USER_FETCH_SUCCEEDED\", user: user});\n   } catch (e) {\n      yield put({type: \"USER_FETCH_FAILED\", message: e.message});\n   }\n}\n\n/*\n  Starts fetchUser on each dispatched `USER_FETCH_REQUESTED` action.\n  Allows concurrent fetches of user.\n*/\nfunction* mySaga() {\n  yield takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\n}\n\n/*\n  Alternatively you may use takeLatest.\n\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\n  dispatched while a fetch is already pending, that pending fetch is cancelled\n  and only the latest one will be run.\n*/\nfunction* mySaga() {\n  yield takeLatest(\"USER_FETCH_REQUESTED\", fetchUser);\n}\n\nexport default mySaga;\n</pre><p>To run our Saga, we'll have to connect it to the Redux Store using the <code>redux-saga</code> middleware.</p><h4><code>main.js</code><a href=\"https://redux-saga.js.org/docs/introduction/GettingStarted#mainjs\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h4><pre class=\"ql-syntax\" spellcheck=\"false\">import { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\nimport reducer from './reducers'\nimport mySaga from './sagas'\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n// mount it on the Store\nconst store = createStore(\n  reducer,\n  applyMiddleware(sagaMiddleware)\n)\n\n// then run the saga\nsagaMiddleware.run(mySaga)\n\n// render the application\n</pre><h2>Using UMD build in the browser<a href=\"https://redux-saga.js.org/docs/introduction/GettingStarted#using-umd-build-in-the-browser\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h2><p>There is also a <strong>UMD</strong> build of <code>redux-saga</code> available in the <code>dist/</code> folder. When using the umd build <code>redux-saga</code> is available as <code>ReduxSaga</code> in the window object. This enables you to create Saga middleware without using ES6 <code>import</code> syntax like this:</p><pre class=\"ql-syntax\" spellcheck=\"false\">var sagaMiddleware = ReduxSaga.default()\n</pre><p><br></p><p>The UMD version is useful if you don't use Webpack or Browserify. You can access it directly from <a href=\"https://unpkg.com/\" rel=\"noopener noreferrer\" target=\"_blank\">unpkg</a>.</p><p>The following builds are available:</p><ul><li><a href=\"https://unpkg.com/redux-saga/dist/redux-saga.umd.js\" rel=\"noopener noreferrer\" target=\"_blank\">https://unpkg.com/redux-saga/dist/redux-saga.umd.js</a></li><li><a href=\"https://unpkg.com/redux-saga/dist/redux-saga.umd.min.js\" rel=\"noopener noreferrer\" target=\"_blank\">https://unpkg.com/redux-saga/dist/redux-saga.umd.min.js</a></li></ul><p><strong>Important!</strong></p><p> If the browser you are targeting doesn't support <em>ES2015 generators</em>, you must transpile them (i.e., with <a href=\"https://github.com/facebook/regenerator/tree/master/packages/regenerator-transform\" rel=\"noopener noreferrer\" target=\"_blank\">babel plugin</a>) and provide a valid runtime, such as <a href=\"https://unpkg.com/regenerator-runtime/runtime.js\" rel=\"noopener noreferrer\" target=\"_blank\">the one here</a>. The runtime must be imported before <strong>redux-saga</strong>:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import 'regenerator-runtime/runtime'\n// then\nimport sagaMiddleware from 'redux-saga'\n</pre><p><br></p>","title":"What is Redux Saga?","ID":"3f64d0f4-d22a-4a4f-b6eb-799c398f2215","tags":[],"excerpt":"redux-saga is a library that aims to make application side effects (i.e. asynchronous things like data fetching and impure things like accessing the browser cache) easier to manage, more efficient to execute, easy to test, and better at handling failures."},{"createdAt":1640880008895,"cover":"","content":"<h5><br></h5><h5>What You'll Learn</h5><ul><li>What RTK Query is and what problems it solves</li><li>What APIs are included in RTK Query</li><li>Basic RTK Query usage</li></ul><p><strong>RTK Query</strong> is a powerful data fetching and caching tool. It is designed to simplify common cases for loading data in a web application, <strong>eliminating the need to hand-write data fetching &amp; caching logic yourself</strong>.</p><p>RTK Query is <strong>an optional addon included in the Redux Toolkit package</strong>, and its functionality is built on top of the other APIs in Redux Toolkit.</p><h2>Motivation<a href=\"https://redux-toolkit.js.org/rtk-query/overview#motivation\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h2><p>Web applications normally need to fetch data from a server in order to display it. They also usually need to make updates to that data, send those updates to the server, and keep the cached data on the client in sync with the data on the server. This is made more complicated by the need to implement other behaviors used in today's applications:</p><ul><li>Tracking loading state in order to show UI spinners</li><li>Avoiding duplicate requests for the same data</li><li>Optimistic updates to make the UI feel faster</li><li>Managing cache lifetimes as the user interacts with the UI</li></ul><p>The Redux core has always been very minimal - it's up to developers to write all the actual logic. That means that Redux has never included anything built in to help solve these use cases. The Redux docs have taught <a href=\"https://redux.js.org/tutorials/fundamentals/part-7-standard-patterns#async-request-status\" rel=\"noopener noreferrer\" target=\"_blank\">some common patterns for dispatching actions around the request lifecycle to track loading state and request results</a>, and <a href=\"https://redux-toolkit.js.org/api/createAsyncThunk\" rel=\"noopener noreferrer\" target=\"_blank\">Redux Toolkit's </a><code><a href=\"https://redux-toolkit.js.org/api/createAsyncThunk\" rel=\"noopener noreferrer\" target=\"_blank\">createAsyncThunk</a></code><a href=\"https://redux-toolkit.js.org/api/createAsyncThunk\" rel=\"noopener noreferrer\" target=\"_blank\"> API</a> was designed to abstract that typical pattern. However, users still have to write significant amounts of reducer logic to manage the loading state and the cached data.</p><p>Over the last couple years, the React community has come to realize that <strong>\"data fetching and caching\" is really a different set of concerns than \"state management\"</strong>. While you can use a state management library like Redux to cache data, the use cases are different enough that it's worth using tools that are purpose-built for the data fetching use case.</p><p>RTK Query takes inspiration from other tools that have pioneered solutions for data fetching, like Apollo Client, React Query, Urql, and SWR, but adds a unique approach to its API design:</p><ul><li>The data fetching and caching logic is built on top of Redux Toolkit's <code>createSlice</code> and <code>createAsyncThunk</code> APIs</li><li>Because Redux Toolkit is UI-agnostic, RTK Query's functionality can be used with any UI layer</li><li>API endpoints are defined ahead of time, including how to generate query parameters from arguments and transform responses for caching</li><li>RTK Query can also generate React hooks that encapsulate the entire data fetching process, provide <code>data</code> and <code>isLoading</code> fields to components, and manage the lifetime of cached data as components mount and unmount</li><li>RTK Query provides \"cache entry lifecycle\" options that enable use cases like streaming cache updates via websocket messages after fetching the initial data</li><li>We have early working examples of code generation of API slices from OpenAPI and GraphQL schemas</li><li>Finally, RTK Query is completely written in TypeScript, and is designed to provide an excellent TS usage experience</li></ul><h2>What's included<a href=\"https://redux-toolkit.js.org/rtk-query/overview#whats-included\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h2><h3>APIs<a href=\"https://redux-toolkit.js.org/rtk-query/overview#apis\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h3><p>RTK Query is included within the installation of the core Redux Toolkit package. It is available via either of the two entry points below:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import { createApi } from '@reduxjs/toolkit/query'\n\n/* React-specific entry point that automatically generates\n   hooks corresponding to the defined endpoints */\nimport { createApi } from '@reduxjs/toolkit/query/react'\n</pre><p>RTK Query includes these APIs:</p><ul><li><code><a href=\"https://redux-toolkit.js.org/rtk-query/api/createApi\" rel=\"noopener noreferrer\" target=\"_blank\">createApi()</a></code>: The core of RTK Query's functionality. It allows you to define a set of endpoints describe how to retrieve data from a series of endpoints, including configuration of how to fetch and transform that data. In most cases, you should use this once per app, with \"one API slice per base URL\" as a rule of thumb.</li><li><code><a href=\"https://redux-toolkit.js.org/rtk-query/api/fetchBaseQuery\" rel=\"noopener noreferrer\" target=\"_blank\">fetchBaseQuery()</a></code>: A small wrapper around <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\" rel=\"noopener noreferrer\" target=\"_blank\">fetch</a></code> that aims to simplify requests. Intended as the recommended <code>baseQuery</code> to be used in <code>createApi</code> for the majority of users.</li><li><code><a href=\"https://redux-toolkit.js.org/rtk-query/api/ApiProvider\" rel=\"noopener noreferrer\" target=\"_blank\">&lt;ApiProvider /&gt;</a></code>: Can be used as a <code>Provider</code> if you <strong>do not already have a Redux store</strong>.</li><li><code><a href=\"https://redux-toolkit.js.org/rtk-query/api/setupListeners\" rel=\"noopener noreferrer\" target=\"_blank\">setupListeners()</a></code>: A utility used to enable <code>refetchOnMount</code> and <code>refetchOnReconnect</code> behaviors.</li></ul><h3>Bundle Size<a href=\"https://redux-toolkit.js.org/rtk-query/overview#bundle-size\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h3><p>RTK Query adds a fixed one-time amount to your app's bundle size. Since RTK Query builds on top of Redux Toolkit and React-Redux, the added size varies depending on whether you are already using those in your app. The estimated min+gzip bundle sizes are:</p><ul><li>If you are using RTK already: ~9kb for RTK Query and ~2kb for the hooks.</li><li>If you are not using RTK already:</li><li class=\"ql-indent-1\">Without React: 17 kB for RTK+dependencies+RTK Query</li><li class=\"ql-indent-1\">With React: 19kB + React-Redux, which is a peer dependency</li></ul><p>Adding additional endpoint definitions should only increase size based on the actual code inside the <code>endpoints</code> definitions, which will typically be just a few bytes.</p><p>The functionality included in RTK Query quickly pays for the added bundle size, and the elimination of hand-written data fetching logic should be a net improvement in size for most meaningful applications.</p><h2>Basic Usage<a href=\"https://redux-toolkit.js.org/rtk-query/overview#basic-usage\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h2><h3>Create an API Slice<a href=\"https://redux-toolkit.js.org/rtk-query/overview#create-an-api-slice\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h3><p>RTK Query is included within the installation of the core Redux Toolkit package. It is available via either of the two entry points below:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import { createApi } from '@reduxjs/toolkit/query'\n\n/* React-specific entry point that automatically generates\n   hooks corresponding to the defined endpoints */\nimport { createApi } from '@reduxjs/toolkit/query/react'\n</pre><p>For typical usage with React, start by importing <code>createApi</code> and defining an \"API slice\" that lists the server's base URL and which endpoints we want to interact with:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { Pokemon } from './types'\n\n// Define a service using a base URL and expected endpoints\nexport const pokemonApi = createApi({\n  reducerPath: 'pokemonApi',\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://pokeapi.co/api/v2/' }),\n  endpoints: (builder) =&gt; ({\n    getPokemonByName: builder.query&lt;Pokemon, string&gt;({\n      query: (name) =&gt; `pokemon/${name}`,\n    }),\n  }),\n})\n\n// Export hooks for usage in functional components, which are\n// auto-generated based on the defined endpoints\nexport const { useGetPokemonByNameQuery } = pokemonApi\n</pre><h3>Configure the Store<a href=\"https://redux-toolkit.js.org/rtk-query/overview#configure-the-store\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h3><p>The \"API slice\" also contains an auto-generated Redux slice reducer and a custom middleware that manages subscription lifetimes. Both of those need to be added to the Redux store:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import { configureStore } from '@reduxjs/toolkit'\n// Or from '@reduxjs/toolkit/query/react'\nimport { setupListeners } from '@reduxjs/toolkit/query'\nimport { pokemonApi } from './services/pokemon'\n\nexport const store = configureStore({\n  reducer: {\n    // Add the generated reducer as a specific top-level slice\n    [pokemonApi.reducerPath]: pokemonApi.reducer,\n  },\n  // Adding the api middleware enables caching, invalidation, polling,\n  // and other useful features of `rtk-query`.\n  middleware: (getDefaultMiddleware) =&gt;\n    getDefaultMiddleware().concat(pokemonApi.middleware),\n})\n\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors\n// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization\nsetupListeners(store.dispatch)\n</pre><h3>Use Hooks in Components<a href=\"https://redux-toolkit.js.org/rtk-query/overview#use-hooks-in-components\" rel=\"noopener noreferrer\" target=\"_blank\">​</a></h3><p>Finally, import the auto-generated React hooks from the API slice into your component file, and call the hooks in your component with any needed parameters. RTK Query will automatically fetch data on mount, re-fetch when parameters change, provide <code>{data, isFetching}</code> values in the result, and re-render the component as those values change:</p>","title":"RTK Query Overview","ID":"664c6374-9413-4c01-aca0-584856dc95d8","tags":[],"excerpt":"RTK Query is a powerful data fetching and caching tool. It is designed to simplify common cases for loading data in a web application, eliminating the need to hand-write data fetching & caching logic yourself."}]